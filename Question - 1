Sure! Here are the explanations of each CSS position with one code example for each:

1. Static:
The default position for HTML elements is static. Elements with `position: static` are positioned according to the normal flow of the document.

Example:
```html
<div class="static-position">Static Position</div>
```
```css
.static-position {
  position: static;
}
```
In the example above, the `div` element with the class "static-position" will be positioned statically, following the normal flow of the document.

2. Fixed:
Elements with `position: fixed` are positioned relative to the viewport and do not move even if the page is scrolled.

Example:
```html
<div class="fixed-position">Fixed Position</div>
```
```css
.fixed-position {
  position: fixed;
  top: 20px;
  left: 20px;
}
```
In the example above, the `div` element with the class "fixed-position" will be positioned 20 pixels from the top and 20 pixels from the left of the viewport. It will remain fixed in that position even if the page is scrolled.

3. Sticky:
Elements with `position: sticky` are positioned based on the user's scroll position. They behave like `relative` positioned elements until a specified threshold is met, after which they become `fixed` positioned.

Example:
```html
<div class="sticky-position">Sticky Position</div>
```
```css
.sticky-position {
  position: sticky;
  top: 20px;
}
```
In the example above, the `div` element with the class "sticky-position" will be positioned 20 pixels from the top of its containing element. As the user scrolls, once the element reaches the specified threshold (usually when its top reaches the top of the viewport), it will become sticky and remain in that position.

4. Relative:
Elements with `position: relative` are positioned relative to their normal position in the document flow. It allows you to adjust the position using the `top`, `right`, `bottom`, and `left` properties.

Example:
```html
<div class="relative-position">Relative Position</div>
```
```css
.relative-position {
  position: relative;
  top: 10px;
  left: 20px;
}
```
In the example above, the `div` element with the class "relative-position" will be positioned 10 pixels down and 20 pixels to the right of its normal position in the document flow.

5. Absolute:
Elements with `position: absolute` are positioned relative to their closest positioned ancestor, if any. If there is no positioned ancestor, it will be positioned relative to the initial containing block (usually the viewport).

Example:
```html
<div class="container">
  <div class="absolute-position">Absolute Position</div>
</div>
```
```css
.container {
  position: relative;
  height: 200px;
}

.absolute-position {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
```
In the example above, the `div` element with the class "absolute-position" is positioned absolutely within its closest positioned ancestor, which is the `div` element with the class "container". It is centered both vertically and horizontally using the `top`, `left`, and `transform` properties.
